<?xml version="1.0" encoding="utf-8"?>
<Simulations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="6">
  <Name>Simulations</Name>
  <DataStore>
    <Name>DataStore</Name>
    <AutoExport>false</AutoExport>
    <MaximumResultsPerPage>1000</MaximumResultsPerPage>
  </DataStore>
  <Simulation>
    <Name>StripExpt_ZoneMgr</Name>
    <Clock>
      <Name>Clock</Name>
      <StartDate>2000-01-01T00:00:00</StartDate>
      <EndDate>2000-01-31T00:00:00</EndDate>
    </Clock>
    <ControlledEnvironment>
      <Name>ControlledEnvironment</Name>
      <MaxT>25</MaxT>
      <MinT>15</MinT>
      <Rain>0</Rain>
      <Radn>25</Radn>
      <PanEvap>0</PanEvap>
      <VP>17</VP>
      <Wind>3</Wind>
      <CO2>350</CO2>
      <AirPressure>1010</AirPressure>
      <Latitude>0</Latitude>
      <DayLength>12</DayLength>
    </ControlledEnvironment>
    <SoilArbitrator>
      <Name>SoilArbitrator</Name>
    </SoilArbitrator>
    <Summary>
      <Name>Summary</Name>
    </Summary>
    <Folder>
      <Name>SimPlots</Name>
      <Graph>
        <Name>PlantWt</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>PlantMass</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>2600</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>Harvested</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Harvested</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterDemand</Name>
        <Series>
          <Name>Demand</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SW_Demand</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>5</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterUptake</Name>
        <Series>
          <Name>Uptake</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-1663232</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SW_Uptake</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>5</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterStress</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>glfWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>1.05</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NDemand</Name>
        <Series>
          <Name>Demand</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>N_Demand</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NUptake</Name>
        <Series>
          <Name>Uptake</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-1663232</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>N_Uptake</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NStress</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>glfNitrogen</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>1.05</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilNitrogen</Name>
        <Series>
          <Name>Nitrogen</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilNitrogen</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>IrrigationApplied</Name>
        <Series>
          <Name>Irrigation</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Irrigation</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>FertiliserApplied</Name>
        <Series>
          <Name>Fertiliser</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Fertiliser</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
    </Folder>
    <Zone>
      <Name>Zm2</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>DoRootsMultiZone</Name>
          <Script>
            <RootDepth>600</RootDepth>
            <RootMass>500</RootMass>
            <strZoneNames>Zm2 Zm1 Z0 Zp1 Zp2</strZoneNames>
            <MyZoneName>Zp2</MyZoneName>
            <strRootProps>50 100 50</strRootProps>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Root depth in the plant's zone (mm): ")]  public double RootDepth { get; set; }
		[Description("Root mass  in the plant's zone (mm): ")]  public double RootMass { get; set; }

		[Description("Name of the zones in order: ")] public string strZoneNames { get; set; }
		[Description("Name of the current zone: ")] public string MyZoneName { get; set; }
		[Description("Two-sided distribution of roots: ")] public string strRootProps { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9


		// - Outputs from this manager

		// - Internal variables
		public string[] ZoneNames;
		public string[] str1RootProps;
		public int MyZoneNum;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// create array of zone names
			ZoneNames = strZoneNames.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			// find where I am in this array
			MyZoneNum = Array.IndexOf(ZoneNames, MyZoneName);

			// split up the array of root proportions
			str1RootProps = strRootProps.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			//NumRootProps = str1RootProps.Length;
			summary.WriteMessage(this, "NumRootProps " + str1RootProps.Length.ToString("#0"));
			double[] PaddedRootProps = new double[ZoneNames.Length];  // initialised at 0.0
			int ii = 0;
			int StartInsertion = MyZoneNum - ((str1RootProps.Length - 1) / 2);
			for (int i = StartInsertion; i < StartInsertion + str1RootProps.Length; i++)
			{
				if ((i >= 0) && (i <= ZoneNames.Length - 1))
					PaddedRootProps[i] = Convert.ToDouble(str1RootProps[ii]);
				if (ii == ((str1RootProps.Length - 1) / 2))
					PaddedRootProps[i] = 0.0;
				ii += 1;
			}

			for (int i = 0; i < ZoneNames.Length; i++)
				summary.WriteMessage(this, ZoneNames[i] + "  " + PaddedRootProps[i].ToString("#0"));			
			
			int SpeciesNum = 0;
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				SpeciesNum += 1;
				if (SpeciesNum == 1)
				{
					for (int i = 0; i < ZoneNames.Length; i++)
					{
						if (PaddedRootProps[i] > 0)
							species.AddZone(zoneName: ZoneNames[i], rootDepth: PaddedRootProps[i] * RootDepth, rootDM: PaddedRootProps[i] * RootMass, specificRootLength: 100);
					}
					
					//if (Zone2Prop > 0)
					//	species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass, specificRootLength: 100);
				} 
			}

			//Pasture[1].AddZone(zoneName: "Zone1", rootDepth: 100, rootDM: 1000, specificRootLength: 100);
			//Pasture[1].AddZone(zoneName: "Zone2", rootDepth: 50, rootDM: 500, specificRootLength: 100);
		}
	}
}]]></Code>
        </Manager>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Zone>
      <Name>Zm1</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>DoRootsMultiZone</Name>
          <Script>
            <RootDepth>600</RootDepth>
            <RootMass>500</RootMass>
            <strZoneNames>Zm2 Zm1 Z0 Zp1 Zp2</strZoneNames>
            <MyZoneName>Zm1</MyZoneName>
            <strRootProps>50 100 50</strRootProps>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Root depth in the plant's zone (mm): ")]  public double RootDepth { get; set; }
		[Description("Root mass  in the plant's zone (mm): ")]  public double RootMass { get; set; }

		[Description("Name of the zones in order: ")] public string strZoneNames { get; set; }
		[Description("Name of the current zone: ")] public string MyZoneName { get; set; }
		[Description("Two-sided distribution of roots: ")] public string strRootProps { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9


		// - Outputs from this manager

		// - Internal variables
		public string[] ZoneNames;
		public string[] str1RootProps;
		public int MyZoneNum;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// create array of zone names
			ZoneNames = strZoneNames.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			// find where I am in this array
			MyZoneNum = Array.IndexOf(ZoneNames, MyZoneName);

			// split up the array of root proportions
			str1RootProps = strRootProps.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			//NumRootProps = str1RootProps.Length;
			summary.WriteMessage(this, "NumRootProps " + str1RootProps.Length.ToString("#0"));
			double[] PaddedRootProps = new double[ZoneNames.Length];  // initialised at 0.0
			int ii = 0;
			int StartInsertion = MyZoneNum - ((str1RootProps.Length - 1) / 2);
			for (int i = StartInsertion; i < StartInsertion + str1RootProps.Length; i++)
			{
				if ((i >= 0) && (i <= ZoneNames.Length - 1))
					PaddedRootProps[i] = Convert.ToDouble(str1RootProps[ii]);
				if (ii == ((str1RootProps.Length - 1) / 2))
					PaddedRootProps[i] = 0.0;
				ii += 1;
			}

			for (int i = 0; i < ZoneNames.Length; i++)
				summary.WriteMessage(this, ZoneNames[i] + "  " + PaddedRootProps[i].ToString("#0"));			
			
			int SpeciesNum = 0;
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				SpeciesNum += 1;
				if (SpeciesNum == 1)
				{
					for (int i = 0; i < ZoneNames.Length; i++)
					{
						if (PaddedRootProps[i] > 0)
							species.AddZone(zoneName: ZoneNames[i], rootDepth: PaddedRootProps[i] * RootDepth, rootDM: PaddedRootProps[i] * RootMass, specificRootLength: 100);
					}
					
					//if (Zone2Prop > 0)
					//	species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass, specificRootLength: 100);
				} 
			}

			//Pasture[1].AddZone(zoneName: "Zone1", rootDepth: 100, rootDM: 1000, specificRootLength: 100);
			//Pasture[1].AddZone(zoneName: "Zone2", rootDepth: 50, rootDM: 500, specificRootLength: 100);
		}
	}
}]]></Code>
        </Manager>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Zone>
      <Name>Z0</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>DoRootsMultiZone</Name>
          <Script>
            <RootDepth>600</RootDepth>
            <RootMass>500</RootMass>
            <strZoneNames>Zm2 Zm1 Z0 Zp1 Zp2</strZoneNames>
            <MyZoneName>Z0</MyZoneName>
            <strRootProps>50 100 50</strRootProps>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Root depth in the plant's zone (mm): ")]  public double RootDepth { get; set; }
		[Description("Root mass  in the plant's zone (mm): ")]  public double RootMass { get; set; }

		[Description("Name of the zones in order: ")] public string strZoneNames { get; set; }
		[Description("Name of the current zone: ")] public string MyZoneName { get; set; }
		[Description("Two-sided distribution of roots: ")] public string strRootProps { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9


		// - Outputs from this manager

		// - Internal variables
		public string[] ZoneNames;
		public string[] str1RootProps;
		public int MyZoneNum;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// create array of zone names
			ZoneNames = strZoneNames.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			// find where I am in this array
			MyZoneNum = Array.IndexOf(ZoneNames, MyZoneName);

			// split up the array of root proportions
			str1RootProps = strRootProps.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			//NumRootProps = str1RootProps.Length;
			summary.WriteMessage(this, "NumRootProps " + str1RootProps.Length.ToString("#0"));
			double[] PaddedRootProps = new double[ZoneNames.Length];  // initialised at 0.0
			int ii = 0;
			int StartInsertion = MyZoneNum - ((str1RootProps.Length - 1) / 2);
			for (int i = StartInsertion; i < StartInsertion + str1RootProps.Length; i++)
			{
				if ((i >= 0) && (i <= ZoneNames.Length - 1))
					PaddedRootProps[i] = Convert.ToDouble(str1RootProps[ii]);
				if (ii == ((str1RootProps.Length - 1) / 2))
					PaddedRootProps[i] = 0.0;
				ii += 1;
			}

			for (int i = 0; i < ZoneNames.Length; i++)
				summary.WriteMessage(this, ZoneNames[i] + "  " + PaddedRootProps[i].ToString("#0"));			
			
			int SpeciesNum = 0;
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				SpeciesNum += 1;
				if (SpeciesNum == 1)
				{
					for (int i = 0; i < ZoneNames.Length; i++)
					{
						if (PaddedRootProps[i] > 0)
							species.AddZone(zoneName: ZoneNames[i], rootDepth: PaddedRootProps[i] * RootDepth, rootDM: PaddedRootProps[i] * RootMass, specificRootLength: 100);
					}
					
					//if (Zone2Prop > 0)
					//	species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass, specificRootLength: 100);
				} 
			}

			//Pasture[1].AddZone(zoneName: "Zone1", rootDepth: 100, rootDM: 1000, specificRootLength: 100);
			//Pasture[1].AddZone(zoneName: "Zone2", rootDepth: 50, rootDM: 500, specificRootLength: 100);
		}
	}
}]]></Code>
        </Manager>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Zone>
      <Name>Zp1</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>DoRootsMultiZone</Name>
          <Script>
            <RootDepth>600</RootDepth>
            <RootMass>500</RootMass>
            <strZoneNames>Zm2 Zm1 Z0 Zp1 Zp2</strZoneNames>
            <MyZoneName>Zp1</MyZoneName>
            <strRootProps>50 100 50</strRootProps>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Root depth in the plant's zone (mm): ")]  public double RootDepth { get; set; }
		[Description("Root mass  in the plant's zone (mm): ")]  public double RootMass { get; set; }

		[Description("Name of the zones in order: ")] public string strZoneNames { get; set; }
		[Description("Name of the current zone: ")] public string MyZoneName { get; set; }
		[Description("Two-sided distribution of roots: ")] public string strRootProps { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9


		// - Outputs from this manager

		// - Internal variables
		public string[] ZoneNames;
		public string[] str1RootProps;
		public int MyZoneNum;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// create array of zone names
			ZoneNames = strZoneNames.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			// find where I am in this array
			MyZoneNum = Array.IndexOf(ZoneNames, MyZoneName);

			// split up the array of root proportions
			str1RootProps = strRootProps.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			//NumRootProps = str1RootProps.Length;
			summary.WriteMessage(this, "NumRootProps " + str1RootProps.Length.ToString("#0"));
			double[] PaddedRootProps = new double[ZoneNames.Length];  // initialised at 0.0
			int ii = 0;
			int StartInsertion = MyZoneNum - ((str1RootProps.Length - 1) / 2);
			for (int i = StartInsertion; i < StartInsertion + str1RootProps.Length; i++)
			{
				if ((i >= 0) && (i <= ZoneNames.Length - 1))
					PaddedRootProps[i] = Convert.ToDouble(str1RootProps[ii]);
				if (ii == ((str1RootProps.Length - 1) / 2))
					PaddedRootProps[i] = 0.0;
				ii += 1;
			}

			for (int i = 0; i < ZoneNames.Length; i++)
				summary.WriteMessage(this, ZoneNames[i] + "  " + PaddedRootProps[i].ToString("#0"));			
			
			int SpeciesNum = 0;
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				SpeciesNum += 1;
				if (SpeciesNum == 1)
				{
					for (int i = 0; i < ZoneNames.Length; i++)
					{
						if (PaddedRootProps[i] > 0)
							species.AddZone(zoneName: ZoneNames[i], rootDepth: PaddedRootProps[i] * RootDepth, rootDM: PaddedRootProps[i] * RootMass, specificRootLength: 100);
					}
					
					//if (Zone2Prop > 0)
					//	species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass, specificRootLength: 100);
				} 
			}

			//Pasture[1].AddZone(zoneName: "Zone1", rootDepth: 100, rootDM: 1000, specificRootLength: 100);
			//Pasture[1].AddZone(zoneName: "Zone2", rootDepth: 50, rootDM: 500, specificRootLength: 100);
		}
	}
}]]></Code>
        </Manager>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Zone>
      <Name>Zp2</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>DoRootsMultiZone</Name>
          <Script>
            <RootDepth>600</RootDepth>
            <RootMass>500</RootMass>
            <strZoneNames>Zm2 Zm1 Z0 Zp1 Zp2</strZoneNames>
            <MyZoneName>Zp2</MyZoneName>
            <strRootProps>50 100 50</strRootProps>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Root depth in the plant's zone (mm): ")]  public double RootDepth { get; set; }
		[Description("Root mass  in the plant's zone (mm): ")]  public double RootMass { get; set; }

		[Description("Name of the zones in order: ")] public string strZoneNames { get; set; }
		[Description("Name of the current zone: ")] public string MyZoneName { get; set; }
		[Description("Two-sided distribution of roots: ")] public string strRootProps { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9


		// - Outputs from this manager

		// - Internal variables
		public string[] ZoneNames;
		public string[] str1RootProps;
		public int MyZoneNum;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// create array of zone names
			ZoneNames = strZoneNames.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			// find where I am in this array
			MyZoneNum = Array.IndexOf(ZoneNames, MyZoneName);

			// split up the array of root proportions
			str1RootProps = strRootProps.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			//NumRootProps = str1RootProps.Length;
			summary.WriteMessage(this, "NumRootProps " + str1RootProps.Length.ToString("#0"));
			double[] PaddedRootProps = new double[ZoneNames.Length];  // initialised at 0.0
			int ii = 0;
			int StartInsertion = MyZoneNum - ((str1RootProps.Length - 1) / 2);
			for (int i = StartInsertion; i < StartInsertion + str1RootProps.Length; i++)
			{
				if ((i >= 0) && (i <= ZoneNames.Length - 1))
					PaddedRootProps[i] = Convert.ToDouble(str1RootProps[ii]);
				if (ii == ((str1RootProps.Length - 1) / 2))
					PaddedRootProps[i] = 0.0;
				ii += 1;
			}

			for (int i = 0; i < ZoneNames.Length; i++)
				summary.WriteMessage(this, ZoneNames[i] + "  " + PaddedRootProps[i].ToString("#0"));			
			
			int SpeciesNum = 0;
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				SpeciesNum += 1;
				if (SpeciesNum == 1)
				{
					for (int i = 0; i < ZoneNames.Length; i++)
					{
						if (PaddedRootProps[i] > 0)
							species.AddZone(zoneName: ZoneNames[i], rootDepth: PaddedRootProps[i] * RootDepth, rootDM: PaddedRootProps[i] * RootMass, specificRootLength: 100);
					}
					
					//if (Zone2Prop > 0)
					//	species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass, specificRootLength: 100);
				} 
			}

			//Pasture[1].AddZone(zoneName: "Zone1", rootDepth: 100, rootDM: 1000, specificRootLength: 100);
			//Pasture[1].AddZone(zoneName: "Zone2", rootDepth: 50, rootDM: 500, specificRootLength: 100);
		}
	}
}]]></Code>
        </Manager>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
  </Simulation>
  <Simulation>
    <Name>StripExpt_GodMgr</Name>
    <Clock>
      <Name>Clock</Name>
      <StartDate>2000-01-01T00:00:00</StartDate>
      <EndDate>2000-01-31T00:00:00</EndDate>
    </Clock>
    <ControlledEnvironment>
      <Name>ControlledEnvironment</Name>
      <MaxT>25</MaxT>
      <MinT>15</MinT>
      <Rain>0</Rain>
      <Radn>25</Radn>
      <PanEvap>0</PanEvap>
      <VP>17</VP>
      <Wind>3</Wind>
      <CO2>350</CO2>
      <AirPressure>1010</AirPressure>
      <Latitude>0</Latitude>
      <DayLength>12</DayLength>
    </ControlledEnvironment>
    <SoilArbitrator>
      <Name>SoilArbitrator</Name>
    </SoilArbitrator>
    <Summary>
      <Name>Summary</Name>
    </Summary>
    <Manager>
      <Name>DoRootsMultiZoneGod</Name>
      <Script>
        <RootDepth>600</RootDepth>
        <RootMass>500</RootMass>
        <strRootProps>50 100 50</strRootProps>
      </Script>
      <Code><![CDATA[//this module describes the irrigator, it's use and how much irrigation should be applied to each field

using System;
using Models.Core;
using Models.PMF.OldPlant;
//don't need OldPlant when use MCSP
using System.Collections.Generic;
using Models.Soils;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Summary Summary;
		[Link] Clock Clock;
		//[Link] Weather Weather;
		[Link] Simulation Simulation;
		
		// - Paramters for this manager
		[Description("Root depth in the plant's zone (mm): ")]  public double RootDepth { get; set; }
		[Description("Root mass  in the plant's zone (mm): ")]  public double RootMass { get; set; }

		//[Description("Name of the zones in order: ")] public string strZoneNames { get; set; }
		//[Description("Name of the current zone: ")] public string MyZoneName { get; set; }
		[Description("Two-sided distribution of roots: ")] public string strRootProps { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9

		
		//public double[] Today_PatchIrrigation { get; set; }

		//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
		//fertiliser.Apply(Amount: Fert_rate, Depth: Fert_depth, Type: Fertiliser.Types.NO3N);


        
		private Zone[] Zones { get; set; }

		//setting things to zero
		[EventSubscribe("Commencing")] private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// I assume I can't get the zones at this stage?
		}
        
		[EventSubscribe("StartOfSimulation")] private void DoStartOfSimulation(object sender, EventArgs e)
		{
			// Set up our list of zones in the simulation
			List<Zone> zones = new List<Zone>();
			foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
				zones.Add(zone as Zone);
			Zones = zones.ToArray();
			
			string[] ZoneNames = new string[3] { "Z0", "Z01", "Z02" };
			double[] PaddedRootProps = new double[3] { 50.0, 0.0, 50.0 };
               
			//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
			//Soil soil = Apsim.Find(Zones[i], typeof(Soil)) as Soil;
			
			AgPasture.PastureSpecies agpasture = Apsim.Find(Zones[1], typeof(AgPasture.PastureSpecies)) as AgPasture.PastureSpecies;
			agpasture.AddZone(zoneName: ZoneNames[0], rootDepth: PaddedRootProps[0] * RootDepth, rootDM: PaddedRootProps[0] * RootMass, specificRootLength: 100);
			agpasture.AddZone(zoneName: ZoneNames[1], rootDepth: PaddedRootProps[1] * RootDepth, rootDM: PaddedRootProps[1] * RootMass, specificRootLength: 100);

			/*for (int i = 0; i < Zones.Length; i++)
			{
				if (i == 1)  //(i == (Zones.Length - 1) / 2)
				{
					AgPasture.PastureSpecies agpasture = Apsim.Find(Zones[i], typeof(AgPasture.PastureSpecies)) as AgPasture.PastureSpecies;
					if (PaddedRootProps[i] > 0.0)
						agpasture.AddZone(zoneName: ZoneNames[i], rootDepth: PaddedRootProps[i] * RootDepth, rootDM: PaddedRootProps[i] * RootMass, specificRootLength: 100);
				}
			} */
			
		}
		
		
		[EventSubscribe("DoManagement")] private void DoManagement(object sender, EventArgs e)
		{
		}
	}
}
]]></Code>
    </Manager>
    <Zone>
      <Name>Z0</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>no</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Folder>
      <Name>SimPlots</Name>
      <Graph>
        <Name>SoilWater0</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter>[Zone] = 'Z0'</Filter>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater01</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter>[Zone] = 'Z01'</Filter>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater02</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter>[Zone] = 'Z02'</Filter>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>PlantWt</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>PlantMass</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>2600</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>Harvested</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Harvested</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterDemand</Name>
        <Series>
          <Name>Demand</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SW_Demand</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>5</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterUptake</Name>
        <Series>
          <Name>Uptake</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-1663232</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SW_Uptake</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>5</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterStress</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>glfWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>1.05</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NDemand</Name>
        <Series>
          <Name>Demand</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>N_Demand</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NUptake</Name>
        <Series>
          <Name>Uptake</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-1663232</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>N_Uptake</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NStress</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>glfNitrogen</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>1.05</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilNitrogen</Name>
        <Series>
          <Name>Nitrogen</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilNitrogen</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>IrrigationApplied</Name>
        <Series>
          <Name>Irrigation</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Irrigation</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>FertiliserApplied</Name>
        <Series>
          <Name>Fertiliser</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Fertiliser</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
    </Folder>
    <Zone>
      <Name>Z01</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>no</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Zone>
      <Name>Z02</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>no</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
  </Simulation>
  <Folder>
    <Name>Storage</Name>
    <Manager>
      <Name>MultiZoneIrrigator</Name>
      <Script>
        <Today_PatchIrrigation>
        </Today_PatchIrrigation>
        <SoilPAW>
        </SoilPAW>
        <TodayDeficit>
        </TodayDeficit>
        <IrrigDeficit>
        </IrrigDeficit>
        <No_fields>4</No_fields>
        <On_off>True</On_off>
        <Start_irrig>1998-10-01</Start_irrig>
        <Finish_irrig>1999-04-01</Finish_irrig>
        <Irrig_eff>0</Irrig_eff>
        <Nozzle_diameter>0</Nozzle_diameter>
        <Rain_pause>0</Rain_pause>
        <Days_pause>0</Days_pause>
        <Crop_in>True</Crop_in>
        <Application>0</Application>
        <Resp_irrig>True</Resp_irrig>
        <Var_rate>True</Var_rate>
        <Var_field>False</Var_field>
        <Soil_depth>0</Soil_depth>
        <Irrig_paw>0</Irrig_paw>
        <Irrig_method>Driest</Irrig_method>
        <Current_TodayDeficit>0</Current_TodayDeficit>
        <Current_IrrigDeficit>0</Current_IrrigDeficit>
      </Script>
      <Code><![CDATA[//this module describes the irrigator, it's use and how much irrigation should be applied to each field

using System;
using Models.Core;
using Models.PMF.OldPlant;
//don't need OldPlant when use MCSP
using System.Collections.Generic;
using Models.Soils;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Summary Summary;
		[Link] Clock Clock;
		[Link] Weather Weather;
		[Link] Simulation Simulation;
		
		public double[] Today_PatchIrrigation { get; set; }
		public double[] SoilPAW { get; set; }
		public double[] TodayDeficit { get; set; }
		public double[] IrrigDeficit { get; set; }
		
		[Description("Number of fields to irrigate")]
		public double No_fields { get; set; }
		[Description("Irrigation on? (True/False)")]
		public bool On_off { get; set; }
		[Description("Date irrigator switched on")]
		public DateTime Start_irrig { get; set; }
		[Description("Date irrigator switched off")]
		public DateTime Finish_irrig { get; set; }
		[Description("Irrigation efficiency (%)")]
		public float Irrig_eff { get; set; }
		[Description("Wetting diameter of nozzle (m)")]
		public double Nozzle_diameter { get; set; }
		[Description("Amount of rainfall in last 3 days causes irrigator to pause (mm)")]
		public float Rain_pause { get; set; }
		[Description("Number of days irrigator will pause after rainfall")]
		public float Days_pause { get; set; }
		[Description("Only irrigate when crop is present? (True/False)")]
		public bool Crop_in { get; set; }
		[Description("Depth of irrigation applied per day for set irrigation (mm)")]
		public float Application { get; set; }
		[Description("Irrigation responds to soil moisture? (True/False)")]
		public bool Resp_irrig { get; set; }
		[Description("Variable rate irrigation? (True/False)")]
		public bool Var_rate { get; set; }
		[Description("Variable rate on a field basis? (True/False)")]
		public bool Var_field { get; set; }
		[Description("Depth to which water deficit is considered (mm)")]
		public float Soil_depth { get; set; }
		[Description("PAW lost as threshold for irrigation (%)")]
		public float Irrig_paw { get; set; }
		[Description("Method by which PAW is calculated on a field basis (Mean, Driest, Wettest)")]
		public string Irrig_method { get; set; }

        
		private Zone[] Zones { get; set; }
      
		private int Irrigator_position;
		private int Counter;
		
		private double Rain3;
		private double[] Rain_3;
		private double Days2Pause;
		public double Current_TodayDeficit { get; set; }
		public double Current_IrrigDeficit { get; set; }

		//setting things to zero
		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			Irrigator_position = 0;
			Counter = 1;
			Rain3 = 0;
			Rain_3 = new double[4];
			Rain_3[0] = 0;
			Rain_3[1] = 0;
			Rain_3[2] = 0;
			
			//THESE ARE HERE BECAUSE INTERFACE IS BROKEN - TO BE REMOVED
			Application = 10;
			Irrig_eff = 80;
			Rain_pause = 30;
			Days_pause = 3;
			Soil_depth = 550;
			Irrig_paw = 30;
			Nozzle_diameter = 20;
		}
        
		[EventSubscribe("StartOfSimulation")]
		private void DoStartOfSimulation(object sender, EventArgs e)
		{
			// Set up our list of zones in the simulation
			List<Zone> zones = new List<Zone>();
			foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
			{
				zones.Add(zone as Zone);
			}
			Zones = zones.ToArray();
               
			//set up arrays
			Today_PatchIrrigation = new double[Zones.Length + 1];
			SoilPAW = new double[Zones.Length + 1];
			TodayDeficit = new double[Zones.Length + 1];
			IrrigDeficit = new double[Zones.Length + 1];
		}
		
		
		[EventSubscribe("DoManagement")]
		private void DoManagement(object sender, EventArgs e)
		{
			//sets todays irrigation for each patch to 0
			for (int i = 0; i < Zones.Length; i++)
			{
				Today_PatchIrrigation[i] = 0;
				TodayDeficit[i] = 0;
				IrrigDeficit[i] = 0;
				SoilPAW[i] = 0;
			}

			if (DateUtilities.WithinDates(Start_irrig, Clock.Today.Date, Finish_irrig) && (On_off))
			{ //Only irrigates between set dates and switched on
				
				//calculates rain in last 3 days and whether irrigator is paused 
				Rain_3[2] = Rain_3[1]; //passes the days backwards
				Rain_3[1] = Rain_3[0]; //passes the days backwards
				Rain_3[0] = (double)Apsim.Get(Simulation, "CatchRain.Script.Today_Rain"); //today's rain caught in the CatchRain manager script
				Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days
				if (Rain3 >= Rain_pause) //and if the total is greater than required for irrigator to pause (from UI)
				{ 
					Days2Pause = Days_pause; //the irrigator is paused for set no. days (from UI)
				}
				else
				{
					Days2Pause = Days2Pause - 1; // if not, a day is taken from the pause amount
				}
			
				//Moves the irrigator around the fields every day unless paused. If in the last field, will go onto first field next day.
				if (Counter < No_fields && Days2Pause < 0.5)
				{
					Irrigator_position = Counter;
					Counter = Counter + 1;
				}
				else if (Counter >= No_fields && Days2Pause < 0.5)
				{
					Irrigator_position = Counter;
					Counter = 1;
				}

				if (Resp_irrig)  //if model set to use irrigation responsive to soil water (from UI)
				{
					//Calculate potential PAW and deficit for each patch...

					for (int i = 0; i < Zones.Length; i++)
					{
						Soil soil = Apsim.Find(Zones[i], typeof(Soil)) as Soil;
						double[] sw_dul = soil.SoilWater.DULmm;
						double[] sw_sw = soil.SoilWater.SWmm;
						double[] sw_15 = soil.SoilWater.LL15mm;
						double MySoilDepth = 0;
						for (int z = 0; z <= soil.SoilWater.dlayer.Length - 1; z++)
						{
							MySoilDepth = MySoilDepth + soil.SoilWater.dlayer[z];
							if (MySoilDepth <= Soil_depth)
							{
								SoilPAW[i] = SoilPAW[i] + (sw_dul[z] - sw_15[z]);
								TodayDeficit[i] = TodayDeficit[i] + (sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]));
							}
						}
						IrrigDeficit[i] = ((Irrig_paw / 100) * SoilPAW[i]);
					
					}

					//Determines the current fields deficit and threshold (depending on how it's calculated - from UI)
					double Sum_Area = 0;

					if (Irrig_method == "Wettest")
					{
						Current_TodayDeficit = 0;
						Current_IrrigDeficit = 0.0001;
					}
					else if (Irrig_method == "Driest")
					{
						Current_TodayDeficit = 1000;
						Current_IrrigDeficit = 1;
					}
					else if (Irrig_method == "Mean")
					{
						Current_TodayDeficit = 0;
						Current_IrrigDeficit = 0;
					}

                
					for (int i = 0; i < Zones.Length; i++) //cycles through each patch that is within the paddock where the irrigator is
					{
						double Current_Paddock = (double)Apsim.Get(Zones[i], "Manager_P.Script.This_field_no");
						double Current_Area = (double)Apsim.Get(Zones[i], "Manager_P.Script.Patch_area");
					
						if (Current_Paddock == Irrigator_position)
						{
							if (Irrig_method == "Wettest" && ((TodayDeficit[i] / IrrigDeficit[i]) > (Current_TodayDeficit / Current_IrrigDeficit)))
							{
								Current_TodayDeficit = TodayDeficit[i];
								//Driest todays deficit
								Current_IrrigDeficit = IrrigDeficit[i];
								//Selected irrig deficit threshold
							}
							else if (Irrig_method == "Driest" && ((TodayDeficit[i] / IrrigDeficit[i]) < (Current_TodayDeficit / Current_IrrigDeficit)))
							{
								Current_TodayDeficit = TodayDeficit[i];
								Current_IrrigDeficit = IrrigDeficit[i];
								//Selected irrig deficit threshold
							}
							else if (Irrig_method == "Mean")
							{
								Current_TodayDeficit = Current_TodayDeficit + (TodayDeficit[i] * Current_Area);
								Current_IrrigDeficit = Current_IrrigDeficit + (IrrigDeficit[i] * Current_Area);
								Sum_Area = Sum_Area + Current_Area;
							}
						}
							
						if (Current_Paddock == Irrigator_position && Irrig_method == "Mean")
						{
							Current_TodayDeficit = Current_TodayDeficit / Sum_Area;
							Current_IrrigDeficit = Current_IrrigDeficit / Sum_Area;
						}
					
					}
 
				}
				else if (!Resp_irrig) //If irrigation is not responsive  
				{
					Current_TodayDeficit = 1;
					Current_IrrigDeficit = 0;
				}

				//Moves through all of the paddocks
				for (int i = 0; i < Zones.Length; i++)
				{
					double Current_Paddock = (double)Apsim.Get(Zones[i], "Manager_P.Script.This_field_no");
					double Current_CropStage = (double)Apsim.Get(Zones[i], "Wheat.Zadok.Stage");
					string Status = "Dead";
					Today_PatchIrrigation[i] = 0;
							
					//If option selected then irrigates only alive crops 
					if ((Crop_in && Current_CropStage > 0 && Current_CropStage < 100) || !Crop_in)
					{
						Status = "alive";
					}
					else
					{
						Status = "Dead";
					}
				
					// allocates irrigation if the irrigator is in that paddock, the crops are in, the irrigator isn't paused by rain and if the paddock 'needs' water
					if (Var_rate)
					{
						if (Var_field)
						{
							//on a field basis if variable rate field irrigation
							if (Current_Paddock == Irrigator_position && Status == "alive" && (Days2Pause < 0.5) && (Current_TodayDeficit >= Current_IrrigDeficit))
							{
								Today_PatchIrrigation[i] = (Current_TodayDeficit * (Irrig_eff / 100));
							}	
						}
						else
						{
							//on a patch basis if variable rate patch irrigation
							if (Current_Paddock == Irrigator_position && Status == "alive" && (Days2Pause < 0.5) && (TodayDeficit[i] >= IrrigDeficit[i]))
							{
								Today_PatchIrrigation[i] = (TodayDeficit[i] * (Irrig_eff / 100));
							}	
						}
					}
					else
					{
						//on a field basis if set application rate irrigation
						if (Current_Paddock == Irrigator_position && Status == "alive" && (Days2Pause < 0.5) && (Current_TodayDeficit >= Current_IrrigDeficit))
						{
							Today_PatchIrrigation[i] = (Application * (Irrig_eff / 100));
						}	
					}
				}
			}
		}
	}
}
]]></Code>
    </Manager>
    <Manager>
      <Name>Manager_Field_01</Name>
      <Script>
        <Field_no>1</Field_no>
        <Field_crop>Hartog</Field_crop>
        <Sow_date>1998-09-01</Sow_date>
        <Sow_density>150</Sow_density>
        <Sow_depth>20</Sow_depth>
        <Sow_row>650</Sow_row>
        <Fert1_date>1998-09-01</Fert1_date>
        <Fert2_date>1998-11-01</Fert2_date>
        <Fert_rate>0</Fert_rate>
        <Fert_depth>0</Fert_depth>
        <Harvest_date>1999-02-01</Harvest_date>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.PMF.OldPlant;
//don't need OldPlant when use MCSP
using System.Collections.Generic;
using Models.Soils;

namespace Models
{
	[Serializable]
	
	public class Script : Model
	{
		//Inherits Instance

		//Parameter variables
		[Description("Field number")]
		public double Field_no { get; set; }
		[Description("Crop")]
		public string Field_crop { get; set; }
		[Description("Sowing date (dd/mm)")]
		public DateTime Sow_date { get; set; }
		[Description("Sowing density (plants/m2)")]
		public double Sow_density { get; set; }
		[Description("Sowing depth (mm)")]
		public double Sow_depth { get; set; }
		[Description("Row spacing (mm)")]
		public double Sow_row { get; set; }
		[Description("1st fertiliser application date (dd/mm)")]
		public DateTime Fert1_date { get; set; }
		[Description("2nd fertiliser application date (dd/mm)")]
		public DateTime Fert2_date { get; set; }
		[Description("Fertiliser application rate")]
		public float Fert_rate { get; set; }
		[Description("Fertiliser application depth")]
		public float Fert_depth { get; set; }
		[Description("Harvest date (dd/mm)")]
		public DateTime Harvest_date { get; set; }

		//Inputs
		[Link] Clock Clock;
		//private DateTime Today;

		[Link] Summary Summary;
		
		private Zone[] Zones { get; set; }

		// The following event handler will be called once at the beginning of the simulation

		[EventSubscribe("StartOfSimulation")]
		private void DoStartOfSimulation(object sender, EventArgs e)
		{
			// Set up our list on zones in the simulation
			List<Zone> zones = new List<Zone>();
			foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
			{
				zones.Add(zone as Zone);
			}
			Zones = zones.ToArray();
			Fert_depth = 10;//WHEN FIXED REMOVE
			Fert_rate = 50;//WHEN FIXED REMOVE
		}
		

		// The following event handler will be called each day at the beginning of the day
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
					
			for (int i = 0; i < Zones.Length; i++)
			{
				double Current_Paddock = (double)Apsim.Get(Zones[i], "Manager_P.Script.This_field_no");
		
				if (Clock.Today.Date == Sow_date && Current_Paddock == Field_no)
				{
					Plant15 wheat = Apsim.Find(Zones[i], typeof(Plant15)) as Plant15;//instead of Plant15 will just be Plant when move to MCSP
					wheat.Sow(population: Sow_density, cultivar: Field_crop, depth: Sow_depth, rowSpacing: Sow_row);
				}
					
				if (Clock.Today.Date == Harvest_date && Current_Paddock == Field_no)
				{
					Plant15 wheat = Apsim.Find(Zones[i], typeof(Plant15)) as Plant15;//instead of Plant15 will just be Plant when move to MCSP
					//wheat.harvest();// NO IDEA WHY THIS WON'T HARVEST
				}
					
				if ((Clock.Today.Date == Fert1_date || Clock.Today.Date == Fert2_date) && Current_Paddock == Field_no)
				{
					Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
					fertiliser.Apply(Amount: Fert_rate, Depth: Fert_depth, Type: Fertiliser.Types.NO3N);
				}
				
			}
		}

	}
}]]></Code>
    </Manager>
    <Manager>
      <Name>ApplyWater</Name>
      <Script>
        <IrrApp>
        </IrrApp>
        <TotWaterApp>
        </TotWaterApp>
        <Runoff>
        </Runoff>
        <RunoffField>
        </RunoffField>
        <TargetHourlyApp>
        </TargetHourlyApp>
        <ActualHourlyApp>
        </ActualHourlyApp>
        <TotArea>
        </TotArea>
        <TopKS>0</TopKS>
        <RunOn>
        </RunOn>
        <AreaRunOn>
        </AreaRunOn>
        <WaterExport>
        </WaterExport>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using System.Collections.Generic;
using Models.Soils;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Summary Summary;
		[Link] Simulation Simulation;
		
		private Zone[] Zones { get; set; }
		public double[] IrrApp { get; set; }
		public double[] TotWaterApp { get; set; }
		public double[] Runoff { get; set; }
		public double[] RunoffField { get; set; }
		public double[] TargetHourlyApp { get; set; }
		public double[] ActualHourlyApp { get; set; }
		public double[] TotArea { get; set; }
		public double TopKS { get; set; }
		public double[] RunOn { get; set; }
		public double[] AreaRunOn { get; set; }
		public double[] WaterExport { get; set; }
		
		[EventSubscribe("StartOfSimulation")]
		private void DoStartOfSimulation(object sender, EventArgs e)
		{
			// Set up our list on zones in the simulation
			List<Zone> zones = new List<Zone>();
			foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
			{
				zones.Add(zone as Zone);
			}
			Zones = zones.ToArray();
               
		}
		
		[EventSubscribe("DoManagement")]
		private void DoManagement(object sender, EventArgs e)
		{
			//create the variables we need
			IrrApp = new double[Zones.Length];
			TotWaterApp = new double[Zones.Length];
			Runoff = new double[Zones.Length];
			RunOn = new double[Zones.Length];
			
			//get all the info we need
			IrrApp = (double[])Apsim.Get(Simulation, "MultiZoneIrrigator.Script.Today_PatchIrrigation");
			double TotFields = (double)Apsim.Get(Simulation, "MultiZoneIrrigator.Script.No_fields");
			double NozDiam = (double)Apsim.Get(Simulation, "MultiZoneIrrigator.Script.Nozzle_diameter");
			double RainApp = (double)Apsim.Get(Simulation, "CatchRain.Script.Today_Rain");
            
			RunoffField = new double[(int)TotFields];
			TotArea = new double[(int)TotFields];
			AreaRunOn = new double[(int)TotFields];
			WaterExport = new double[(int)TotFields];
            
			//Calculate how much water (irrigation and rainfall) to apply to each zone and apply it
			for (int i = 0; i < Zones.Length; i++)
			{
				//create the variables we need
				TargetHourlyApp = new double[24];
				ActualHourlyApp = new double[24];
				double Current_IrrPos = (double)Apsim.Get(Zones[i], "Manager_P.Script.Irrigator_position");
				double Current_Area = (double)Apsim.Get(Zones[i], "Manager_P.Script.Patch_area");
				double Current_Field = (double)Apsim.Get(Zones[i], "Manager_P.Script.This_field_no");
				string Current_LandPos = (string)Apsim.Get(Zones[i], "Manager_P.Script.Landscape_position");
										
				//create the links we need
				Soil soil = Apsim.Find(Zones[i], typeof(Soil)) as Soil;
               		
				//calculate application rate               		               		
				double Length = (2 * Math.PI * ((Current_IrrPos * 100) - 50)) / TotFields;
				double WetEvent = 24 / (Length / NozDiam); //24 hours in one day
				double IrrAppRate = IrrApp[i] / WetEvent;
				double RainAppRate = RainApp / 24; //without further information assume rain is equal throughout the day
				double IrrToApply = IrrApp[i];
					
				//get soil characteristics - KS infiltration rate
				double[] KSArray = soil.KS;
				TopKS = KSArray[0]; //double TopKS = KSArray[0];
				TopKS = TopKS / 24; //Need hourly infiltration rate
					
				TotArea[(int)Current_Field - 1] = TotArea[(int)Current_Field - 1] + Current_Area;
					
				//populate hourly water application array THIS IS CORRECT
				for (int j = 0; j < TargetHourlyApp.Length; j++) //for each hour
				{
					TargetHourlyApp[j] = RainAppRate; //add the rain
						
					if (IrrToApply >= IrrAppRate) // then if how much irrigation left to apply is greater or equal to the hourly application rate then
					{
						TargetHourlyApp[j] = TargetHourlyApp[j] + IrrAppRate; // add the amount that will be applied in one hour then
						IrrToApply = IrrToApply - IrrAppRate; // minus it from the total amount for that day
					}
					else if (IrrToApply > 0) // else if the amount of irrigation left is greater than zero (but less than the hourly application rate) then
					{
						TargetHourlyApp[j] = TargetHourlyApp[j] + IrrToApply; //add what's left 
						IrrToApply = 0; //and set to zero
					}
				}
					
				//calculate how much water is going in 

				for (int j = 0; j < TargetHourlyApp.Length; j++) //for each hour
				{
					if ((TargetHourlyApp[j] > TopKS) && Current_LandPos == "Loss") // if the amount of water to appply is greater than the surface infiltration rate then
					{
						Runoff[i] = Runoff[i] + (TargetHourlyApp[j] - TopKS); //runoff anything above the maximum infiltration rate and sum it over the patch
						ActualHourlyApp[j] = TopKS; // and only apply what can infiltrate
					}
					else if (TargetHourlyApp[j] <= TopKS || Current_LandPos != "Loss")
					{
						ActualHourlyApp[j] = TargetHourlyApp[j];
					}
				}
					
				//sum up the hourly array to create a daily water application
				for (int j = 0; j < ActualHourlyApp.Length; j++) //for each hour
				{
					TotWaterApp[i] = TotWaterApp[i] + ActualHourlyApp[j]; // how much water is being applied per patch
				}
					
				RunoffField[(int)Current_Field - 1] = RunoffField[(int)Current_Field - 1] + ((Runoff[i] * 10000) * Current_Area); //Multiply runoff in mm per patch by 10,000 to convert to litres/ha then by the number of ha to get a volume in litres of water running off the patch. Sum across all the patches losing water in the field.
					
					
				if (Current_LandPos == "Gain")
				{
					AreaRunOn[(int)Current_Field - 1] = AreaRunOn[(int)Current_Field - 1] + Current_Area;
				}
			}
            
			//then for each zone find out if runoff to be applied and apply it value in RunoffField[i] * Current_Area
			for (int i = 0; i < Zones.Length; i++)
			{
				double Current_Area = (double)Apsim.Get(Zones[i], "Manager_P.Script.Patch_area");
				string Current_LandPos = (string)Apsim.Get(Zones[i], "Manager_P.Script.Landscape_position");
				double Current_Field = (double)Apsim.Get(Zones[i], "Manager_P.Script.This_field_no");
				Irrigation irrigation = Apsim.Find(Zones[i], typeof(Irrigation)) as Irrigation;
            	            	
				if (RunoffField[(int)Current_Field - 1] > 0 && Current_LandPos == "Gain")
				{
					RunOn[i] = (((RunoffField[(int)Current_Field - 1] / AreaRunOn[(int)Current_Field - 1]) / 10000) * Current_Area);
					TotWaterApp[i] = TotWaterApp[i] + RunOn[i];
				}
				else if (RunoffField[(int)Current_Field - 1] > 0 && AreaRunOn[(int)Current_Field - 1] == 0)
				{
					WaterExport[(int)Current_Field - 1] = (RunoffField[(int)Current_Field - 1] / 10000) / TotArea[(int)Current_Field - 1];
				}
	           	
				//apply the water
				irrigation.Apply(TotWaterApp[i]);        
            
			}
		}
		
	}
}
]]></Code>
    </Manager>
    <Manager>
      <Name>Field_Reporting</Name>
      <Script>
        <RArea_Array>
        </RArea_Array>
        <RYieldArea_Array>
        </RYieldArea_Array>
        <RIrrigationArea_Array>
        </RIrrigationArea_Array>
        <RWaterArea_Array>
        </RWaterArea_Array>
        <RFertiliserArea_Array>
        </RFertiliserArea_Array>
        <RDrainArea_Array>
        </RDrainArea_Array>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using System.Collections.Generic;
using Models.Soils;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Summary Summary;
		[Link] Simulation Simulation;
		
		private Zone[] Zones { get; set; }
		private double No_Fields { get; set; }
		private double[] Yield_Array { get; set; }
		public double[] RArea_Array { get; set; }
		public double[] RYieldArea_Array { get; set; }
		private double[] Irrigation_Array { get; set; }
		public double[] RIrrigationArea_Array { get; set; }
		private double[] Water_Array { get; set; }
		public double[] RWaterArea_Array { get; set; }
		private double[] Fertiliser_Array { get; set; }
		public double[] RFertiliserArea_Array { get; set; }
		private double[] Drain_Array { get; set; }
		public double[] RDrainArea_Array { get; set; }
		private double[] Current_Irrigation { get; set; }
		private double[] Current_Water { get; set; }
		private double[] Current_Rain { get; set; }
		private double[] Current_Drain { get; set; }
		
		
		[EventSubscribe("StartOfSimulation")]
		private void DoStartOfSimulation(object sender, EventArgs e)
		{
			// Set up our list on zones in the simulation
			List<Zone> zones = new List<Zone>();
			foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
			{
				zones.Add(zone as Zone);
			}
			Zones = zones.ToArray();
               
		}
		
		[EventSubscribe("DoManagement")]
		private void DoManagement(object sender, EventArgs e)
		{

			No_Fields = (double)Apsim.Get(Simulation, "MultiZoneIrrigator.Script.No_fields");
			Yield_Array = new double[(int)No_Fields];
			RArea_Array = new double[(int)No_Fields];
			RYieldArea_Array = new double[(int)No_Fields];
			Irrigation_Array = new double[(int)No_Fields];
			RIrrigationArea_Array = new double[(int)No_Fields];
			Water_Array = new double[(int)No_Fields];
			RWaterArea_Array = new double[(int)No_Fields];
			Fertiliser_Array = new double[(int)No_Fields];
			RFertiliserArea_Array = new double[(int)No_Fields];
			Drain_Array = new double[(int)No_Fields];
			RDrainArea_Array = new double[(int)No_Fields];
			
			Current_Irrigation = new double[Zones.Length];			
			Current_Irrigation = (double[])Apsim.Get(Simulation, "MultiZoneIrrigator.Script.Today_PatchIrrigation");
			
			Current_Water = new double[Zones.Length];			
			Current_Water = (double[])Apsim.Get(Simulation, "ApplyWater.Script.TotWaterApp");
			
			for (int i = 0; i < Zones.Length; i++)
			{
				double Current_Paddock = (double)Apsim.Get(Zones[i], "Manager_P.Script.This_field_no");
				double Current_Area = (double)Apsim.Get(Zones[i], "Manager_P.Script.Patch_area"); 
				double Current_Yield = (double)Apsim.Get(Zones[i], "Wheat.AboveGround.Wt");
				double Current_Fertiliser = (double)Apsim.Get(Zones[i], "Fertiliser.NitrogenApplied");
				double Current_Drain = (double)Apsim.Get(Zones[i], "Soil.SoilWater.Drainage");
				Yield_Array[(int)Current_Paddock - 1] += Current_Yield * Current_Area;
				Irrigation_Array[(int)Current_Paddock - 1] += Current_Irrigation[i] * Current_Area;
				Water_Array[(int)Current_Paddock - 1] += Current_Water[i] * Current_Area;
				Fertiliser_Array[(int)Current_Paddock - 1] += Current_Fertiliser * Current_Area;
				Drain_Array[(int)Current_Paddock - 1] += Current_Drain * Current_Area;
				RArea_Array[(int)Current_Paddock - 1] += Current_Area;
			}
            
			for (int i = 0; i < RYieldArea_Array.Length; i++)
			{
				RYieldArea_Array[i] = Yield_Array[i] / RArea_Array[i];
				RIrrigationArea_Array[i] = Irrigation_Array[i] / RArea_Array[i];
				RWaterArea_Array[i] = Water_Array[i] / RArea_Array[i];
				RFertiliserArea_Array[i] = Fertiliser_Array[i] / RArea_Array[i];
				RDrainArea_Array[i] = Drain_Array[i] / RArea_Array[i];
			}
		}
		
	}
}
]]></Code>
    </Manager>
    <Manager>
      <Name>DoRootsMultiZone</Name>
      <Script>
        <RootDepth>600</RootDepth>
        <RootMass>500</RootMass>
        <strZoneNames>Zm2 Zm1 Z0 Zp1 Zp2</strZoneNames>
        <MyZoneName>Zp2</MyZoneName>
        <strRootProps>50 100 50</strRootProps>
      </Script>
      <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Root depth in the plant's zone (mm): ")]  public double RootDepth { get; set; }
		[Description("Root mass  in the plant's zone (mm): ")]  public double RootMass { get; set; }

		[Description("Name of the zones in order: ")] public string strZoneNames { get; set; }
		[Description("Name of the current zone: ")] public string MyZoneName { get; set; }
		[Description("Two-sided distribution of roots: ")] public string strRootProps { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9


		// - Outputs from this manager

		// - Internal variables
		public string[] ZoneNames;
		public string[] str1RootProps;
		public int MyZoneNum;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// create array of zone names
			ZoneNames = strZoneNames.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			// find where I am in this array
			MyZoneNum = Array.IndexOf(ZoneNames, MyZoneName);

			// split up the array of root proportions
			str1RootProps = strRootProps.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			//NumRootProps = str1RootProps.Length;
			summary.WriteMessage(this, "NumRootProps " + str1RootProps.Length.ToString("#0"));
			double[] PaddedRootProps = new double[ZoneNames.Length];  // initialised at 0.0
			int ii = 0;
			int StartInsertion = MyZoneNum - ((str1RootProps.Length - 1) / 2);
			for (int i = StartInsertion; i < StartInsertion + str1RootProps.Length; i++)
			{
				if ((i >= 0) && (i <= ZoneNames.Length - 1))
					PaddedRootProps[i] = Convert.ToDouble(str1RootProps[ii]);
				if (ii == ((str1RootProps.Length - 1) / 2))
					PaddedRootProps[i] = 0.0;
				ii += 1;
			}

			for (int i = 0; i < ZoneNames.Length; i++)
				summary.WriteMessage(this, ZoneNames[i] + "  " + PaddedRootProps[i].ToString("#0"));			
			
			int SpeciesNum = 0;
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				SpeciesNum += 1;
				if (SpeciesNum == 1)
				{
					for (int i = 0; i < ZoneNames.Length; i++)
					{
						if (PaddedRootProps[i] > 0)
							species.AddZone(zoneName: ZoneNames[i], rootDepth: PaddedRootProps[i] * RootDepth, rootDM: PaddedRootProps[i] * RootMass, specificRootLength: 100);
					}
					
					//if (Zone2Prop > 0)
					//	species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass, specificRootLength: 100);
				} 
			}

			//Pasture[1].AddZone(zoneName: "Zone1", rootDepth: 100, rootDM: 1000, specificRootLength: 100);
			//Pasture[1].AddZone(zoneName: "Zone2", rootDepth: 50, rootDM: 500, specificRootLength: 100);
		}
	}
}]]></Code>
    </Manager>
    <Manager>
      <Name>DoRootsMultiZoneGod</Name>
      <Script>
        <RootDepth>600</RootDepth>
        <RootMass>500</RootMass>
        <strRootProps>50 100 50</strRootProps>
      </Script>
      <Code><![CDATA[using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Summary Summary;
		[Link] Clock Clock;
		//[Link] Weather Weather;
		[Link] Simulation Simulation;
		
		// - Paramters for this manager
		[Description("Root depth in the plant's zone (mm): ")]  public double RootDepth { get; set; }
		[Description("Root mass  in the plant's zone (mm): ")]  public double RootMass { get; set; }

		//[Description("Name of the zones in order: ")] public string strZoneNames { get; set; }
		//[Description("Name of the current zone: ")] public string MyZoneName { get; set; }
		[Description("Two-sided distribution of roots: ")] public string strRootProps { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9

		
		//public double[] Today_PatchIrrigation { get; set; }

		//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
		//fertiliser.Apply(Amount: Fert_rate, Depth: Fert_depth, Type: Fertiliser.Types.NO3N);


        
		private Zone[] Zones { get; set; }

		//setting things to zero
		[EventSubscribe("Commencing")] private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// I assume I can't get the zones at this stage?
		}
        
		[EventSubscribe("StartOfSimulation")] private void DoStartOfSimulation(object sender, EventArgs e)
		{
			// Set up our list of zones in the simulation
			List<Zone> zones = new List<Zone>();
			foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
				zones.Add(zone as Zone);
			Zones = zones.ToArray();
			
			string[] ZoneNames = new string[3] { "Z0", "Z01", "Z02" };
			double[] PaddedRootProps = new double[3] { 50.0, 0.0, 50.0 };
               
			//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
			//Soil soil = Apsim.Find(Zones[i], typeof(Soil)) as Soil;
			
			//AgPasture.PastureSpecies agpasture = Apsim.Find(Zones[1], typeof(AgPasture.PastureSpecies)) as AgPasture.PastureSpecies;
			//agpasture.AddZone(zoneName: ZoneNames[0], rootDepth: PaddedRootProps[0] * RootDepth, rootDM: PaddedRootProps[0] * RootMass, specificRootLength: 100);
			//agpasture.AddZone(zoneName: ZoneNames[1], rootDepth: PaddedRootProps[1] * RootDepth, rootDM: PaddedRootProps[1] * RootMass, specificRootLength: 100);

			/*for (int i = 0; i < Zones.Length; i++)
			{
				if (i == 1)  //(i == (Zones.Length - 1) / 2)
				{
					AgPasture.PastureSpecies agpasture = Apsim.Find(Zones[i], typeof(AgPasture.PastureSpecies)) as AgPasture.PastureSpecies;
					if (PaddedRootProps[i] > 0.0)
						agpasture.AddZone(zoneName: ZoneNames[i], rootDepth: PaddedRootProps[i] * RootDepth, rootDM: PaddedRootProps[i] * RootMass, specificRootLength: 100);
				}
			} */
			
		}
		
		
		[EventSubscribe("DoManagement")] private void DoManagement(object sender, EventArgs e)
		{
		}
	}
}
]]></Code>
    </Manager>
    <Manager>
      <Name>DoFertMultiZoneGod</Name>
      <Script>
        <DateFert2Add>0001-01-01</DateFert2Add>
        <ZoneFert2Add>Z01</ZoneFert2Add>
        <AmtFert2Add>1000</AmtFert2Add>
      </Script>
      <Code><![CDATA[using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Summary Summary;
		[Link] Clock Clock;
		//[Link] Weather Weather;
		[Link] Simulation Simulation;
		
		// - Paramters for this manager
		[Description("Date to add the fertiliser: ")] public DateTime DateFert2Add { get; set; }
		[Description("Zone to add fertiliser: ")] public string ZoneFert2Add { get; set; }
		[Description("Amount of fertiliser to add (kg N /ha): ")]  public double AmtFert2Add { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9

		
		//public double[] Today_PatchIrrigation { get; set; }

		//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
		//fertiliser.Apply(Amount: Fert_rate, Depth: Fert_depth, Type: Fertiliser.Types.NO3N);


        
		private Zone[] Zones { get; set; }
		


		[EventSubscribe("Commencing")] private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// Set up our list of zones in the simulation
			List<Zone> zones = new List<Zone>();
			foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
				zones.Add(zone as Zone);
			Zones = zones.ToArray();
			
			
			//ZoneNames = strZoneNames.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			string[] ZoneNames = new string[3] { "Z0", "Z01", "Z02" };
			// find where I am in this array
			int MyZoneNum = Array.IndexOf(ZoneNames, ZoneFert2Add);
			
			
			//double[] PaddedRootProps = new double[3] { 100.0, 0.0, 100.0 };
               
			//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
			//Soil soil = Apsim.Find(Zones[i], typeof(Soil)) as Soil;
			
			//AgPasture.PastureSpecies agpasture = Apsim.Find(Zones[1], typeof(AgPasture.PastureSpecies)) as AgPasture.PastureSpecies;
			//agpasture.AddZone(zoneName: ZoneNames[0], rootDepth: PaddedRootProps[0] * RootDepth, rootDM: PaddedRootProps[0] * RootMass, specificRootLength: 100);
			//agpasture.AddZone(zoneName: ZoneNames[2], rootDepth: PaddedRootProps[2] * RootDepth, rootDM: PaddedRootProps[2] * RootMass, specificRootLength: 100);

			for (int i = 0; i < Zones.Length; i++)
			{
				if (i == MyZoneNum)
				{
					Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
					fertiliser.Apply(Amount: AmtFert2Add, Depth: 10.0, Type: Fertiliser.Types.NO3N);
					
				}
			} 
		}
        
		[EventSubscribe("StartOfSimulation")] private void DoStartOfSimulation(object sender, EventArgs e)
		{
			
		}
		
		
		[EventSubscribe("DoManagement")] private void DoManagement(object sender, EventArgs e)
		{
		}
	}
}
]]></Code>
    </Manager>
  </Folder>
  <Simulation>
    <Name>StripExpt_GodMgr1</Name>
    <Clock>
      <Name>Clock</Name>
      <StartDate>2000-01-01T00:00:00</StartDate>
      <EndDate>2000-01-31T00:00:00</EndDate>
    </Clock>
    <ControlledEnvironment>
      <Name>ControlledEnvironment</Name>
      <MaxT>25</MaxT>
      <MinT>15</MinT>
      <Rain>0</Rain>
      <Radn>25</Radn>
      <PanEvap>0</PanEvap>
      <VP>17</VP>
      <Wind>3</Wind>
      <CO2>350</CO2>
      <AirPressure>1010</AirPressure>
      <Latitude>0</Latitude>
      <DayLength>12</DayLength>
    </ControlledEnvironment>
    <SoilArbitrator>
      <Name>SoilArbitrator</Name>
    </SoilArbitrator>
    <Summary>
      <Name>Summary</Name>
    </Summary>
    <Manager>
      <Name>DoRootsMultiZoneGod</Name>
      <Script>
        <RootDepth>600</RootDepth>
        <RootMass>500</RootMass>
        <strRootProps>100 100 100</strRootProps>
      </Script>
      <Code><![CDATA[using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Summary Summary;
		[Link] Clock Clock;
		//[Link] Weather Weather;
		[Link] Simulation Simulation;
		
		// - Paramters for this manager
		[Description("Root depth in the plant's zone (mm): ")]  public double RootDepth { get; set; }
		[Description("Root mass  in the plant's zone (mm): ")]  public double RootMass { get; set; }

		//[Description("Name of the zones in order: ")] public string strZoneNames { get; set; }
		//[Description("Name of the current zone: ")] public string MyZoneName { get; set; }
		[Description("Two-sided distribution of roots: ")] public string strRootProps { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9

		
		//public double[] Today_PatchIrrigation { get; set; }

		//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
		//fertiliser.Apply(Amount: Fert_rate, Depth: Fert_depth, Type: Fertiliser.Types.NO3N);


        
		private Zone[] Zones { get; set; }

		//setting things to zero
		[EventSubscribe("Commencing")] private void OnSimulationCommencing(object sender, EventArgs e)
		{
			// I assume I can't get the zones at this stage?
			// Set up our list of zones in the simulation
			List<Zone> zones = new List<Zone>();
			foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
				zones.Add(zone as Zone);
			Zones = zones.ToArray();
			
			string[] ZoneNames = new string[3] { "Z0", "Z01", "Z02" };
			double[] PaddedRootProps = new double[3] { 100.0, 0.0, 100.0 };
               
			//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
			//Soil soil = Apsim.Find(Zones[i], typeof(Soil)) as Soil;
			
			//AgPasture.PastureSpecies agpasture = Apsim.Find(Zones[1], typeof(AgPasture.PastureSpecies)) as AgPasture.PastureSpecies;
			//agpasture.AddZone(zoneName: ZoneNames[0], rootDepth: PaddedRootProps[0] * RootDepth, rootDM: PaddedRootProps[0] * RootMass, specificRootLength: 100);
			//agpasture.AddZone(zoneName: ZoneNames[2], rootDepth: PaddedRootProps[2] * RootDepth, rootDM: PaddedRootProps[2] * RootMass, specificRootLength: 100);

			for (int i = 0; i < Zones.Length; i++)
			{
				if (i == 1)  //(i == (Zones.Length - 1) / 2)
				{
					AgPasture.PastureSpecies agpasture = Apsim.Find(Zones[i], typeof(AgPasture.PastureSpecies)) as AgPasture.PastureSpecies;
					if (PaddedRootProps[i] > 0.0)
						agpasture.AddZone(zoneName: ZoneNames[i], rootDepth: PaddedRootProps[i] * RootDepth, rootDM: PaddedRootProps[i] * RootMass, specificRootLength: 100);
				}
			} 
		}
        
		[EventSubscribe("StartOfSimulation")] private void DoStartOfSimulation(object sender, EventArgs e)
		{
			
		}
		
		
		[EventSubscribe("DoManagement")] private void DoManagement(object sender, EventArgs e)
		{
		}
	}
}
]]></Code>
    </Manager>
    <Zone>
      <Name>Z0</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>no</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Zone>
      <Name>Z01</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>no</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Zone>
      <Name>Z02</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>no</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Folder>
      <Name>SimPlots</Name>
      <Graph>
        <Name>SoilWater0</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter>[Zone] = 'Z0'</Filter>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater01</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter>[Zone] = 'Z01'</Filter>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater02</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter>[Zone] = 'Z02'</Filter>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>PlantWt</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>PlantMass</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>2600</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>Harvested</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Harvested</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterDemand</Name>
        <Series>
          <Name>Demand</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SW_Demand</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>5</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterUptake</Name>
        <Series>
          <Name>Uptake</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-1663232</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SW_Uptake</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>5</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterStress</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>glfWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>1.05</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NDemand</Name>
        <Series>
          <Name>Demand</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>N_Demand</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NUptake</Name>
        <Series>
          <Name>Uptake</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-1663232</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>N_Uptake</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NStress</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>glfNitrogen</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>1.05</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilNitrogen</Name>
        <Series>
          <Name>Nitrogen</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilNitrogen</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>IrrigationApplied</Name>
        <Series>
          <Name>Irrigation</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Irrigation</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>FertiliserApplied</Name>
        <Series>
          <Name>Fertiliser</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Fertiliser</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
    </Folder>
  </Simulation>
  <Simulation>
    <Name>StripExpt_GodMgrFertiliser</Name>
    <Clock>
      <Name>Clock</Name>
      <StartDate>2000-01-01T00:00:00</StartDate>
      <EndDate>2000-01-31T00:00:00</EndDate>
    </Clock>
    <ControlledEnvironment>
      <Name>ControlledEnvironment</Name>
      <MaxT>25</MaxT>
      <MinT>15</MinT>
      <Rain>0</Rain>
      <Radn>25</Radn>
      <PanEvap>0</PanEvap>
      <VP>17</VP>
      <Wind>3</Wind>
      <CO2>350</CO2>
      <AirPressure>1010</AirPressure>
      <Latitude>0</Latitude>
      <DayLength>12</DayLength>
    </ControlledEnvironment>
    <SoilArbitrator>
      <Name>SoilArbitrator</Name>
    </SoilArbitrator>
    <Summary>
      <Name>Summary</Name>
    </Summary>
    <Manager>
      <Name>DoFertMultiZoneGod</Name>
      <Script>
        <DateFert2Add>2000-01-01</DateFert2Add>
        <AmtFert2Add>1000</AmtFert2Add>
        <strZonesFert2Add>
        </strZonesFert2Add>
      </Script>
      <Code><![CDATA[using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Summary Summary;
		[Link] Clock Clock;
		//[Link] Weather Weather;
		[Link] Simulation Simulation;
		
		// - Paramters for this manager
		[Description("Date to add the fertiliser: ")] public DateTime DateFert2Add { get; set; }
		[Description("Zone to add fertiliser: ")] public string strZonesFert2Add { get; set; }
		[Description("Amount of fertiliser to add (kg N /ha): ")]  public double AmtFert2Add { get; set; }

		// Zm9 Zm8 Zm7 Zm6 Zm5 Zm4 Zm3 Zm2 Zm1 Z0 Zp1 Zp2 Zp3 Zp4 Zp5 Zp6 Zp7 Zp8 Zp9

		
		//public double[] Today_PatchIrrigation { get; set; }

		//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
		//fertiliser.Apply(Amount: Fert_rate, Depth: Fert_depth, Type: Fertiliser.Types.NO3N);


        
		private Zone[] Zones { get; set; }
		public string[] ZonesFert2Add;


		[EventSubscribe("Commencing")] private void OnSimulationCommencing(object sender, EventArgs e)
		{
			ZonesFert2Add = strZonesFert2Add.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
		}
        
		[EventSubscribe("StartOfSimulation")] private void DoStartOfSimulation(object sender, EventArgs e)
		{
			// Set up our list of zones in the simulation
			List<Zone> zones = new List<Zone>();
			foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
				zones.Add(zone as Zone);
			Zones = zones.ToArray();
			
			Summary.WriteMessage(this, "1 - just done zones");
			
			//ZoneNames = strZoneNames.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);
			string[] ZoneNames = new string[3] { "Z0", "Z01", "Z02" };
			// find where I am in this array
			//int MyZoneNum = Array.IndexOf(ZoneNames, ZoneFert2Add);
			
			Summary.WriteMessage(this, "2 - just done zones");
			
			//double[] PaddedRootProps = new double[3] { 100.0, 0.0, 100.0 };
               
			//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
			//Soil soil = Apsim.Find(Zones[i], typeof(Soil)) as Soil;
			
			//AgPasture.PastureSpecies agpasture = Apsim.Find(Zones[1], typeof(AgPasture.PastureSpecies)) as AgPasture.PastureSpecies;
			//agpasture.AddZone(zoneName: ZoneNames[0], rootDepth: PaddedRootProps[0] * RootDepth, rootDM: PaddedRootProps[0] * RootMass, specificRootLength: 100);
			//agpasture.AddZone(zoneName: ZoneNames[2], rootDepth: PaddedRootProps[2] * RootDepth, rootDM: PaddedRootProps[2] * RootMass, specificRootLength: 100);

			for (int i = 0; i < Zones.Length; i++)
			{
				for (int ii = 0; ii < ZonesFert2Add.Length; ii++)
				{
					int MyZoneNum = Array.IndexOf(ZoneNames, ZonesFert2Add);
					if (MyZoneNum < Zones.Length)
					{
						//Fertiliser fertiliser = Apsim.Find(Zones[i], typeof(Fertiliser)) as Fertiliser;
						//fertiliser.Apply(Amount: AmtFert2Add, Depth: 10.0, Type: Fertiliser.Types.NO3N);
					
					}
				}
			} 
		}
		
		
		[EventSubscribe("DoManagement")] private void DoManagement(object sender, EventArgs e)
		{
		}
	}
}
]]></Code>
    </Manager>
    <Zone>
      <Name>Z0</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>no</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Zone>
      <Name>Z01</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>CutRotationSingle</Name>
          <Script>
            <CutRotationStartDate>1900-07-01</CutRotationStartDate>
            <CutRotationEndDate>2100-12-31</CutRotationEndDate>
            <CutInterval>1</CutInterval>
            <IntervalType>FixedInterval</IntervalType>
            <DurationOfCut>1</DurationOfCut>
            <RemoveAmountType>ResidualDM</RemoveAmountType>
            <AmountGiven>2250</AmountGiven>
            <DMRemoveType>RemoveAll</DMRemoveType>
            <FractionN2Remove>1</FractionN2Remove>
            <ProportionN2Dung>0</ProportionN2Dung>
          </Script>
          <Code><![CDATA[// Defoliates AgPasture on a regular rotation or one-off via a schedule
// currenty defoliates the amount specified by spreading evenly over the specified period

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Models.Core;
using Models.PMF;
using APSIM.Shared.Utilities;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		// - Links to APSIM models
		[Link] Zone myZone;
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		
		List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();
		
		// - Paramters for this manager
		[Description("Date to begin the rotation: ")]
		public DateTime CutRotationStartDate { get; set; }

		[Description("Date to finish the rotation: ")]
		public DateTime CutRotationEndDate { get; set; }

		[Description("Rotation interval (days): ")]
		public int CutInterval { get; set; }

		[Description("How the interval is defined: ")]
		public rotationIntervalTypes IntervalType { get; set; }

		[Description("Duration of each event (days): ")]
		public int DurationOfCut { get; set; }

		[Description("What amount is being defined: ")]
		public removeAmountTypes RemoveAmountType { get; set; }

		[Description("Amount to use (kg/ha): ")]
		public double AmountGiven { get; set; }

		[Description("Fraction of DM that is removed from the field:")]
		public removeDMTypes DMRemoveType { get; set; }

		[Description("Fraction of N that is removed from the field (0-1):")]
		public double FractionN2Remove { get; set; }

		[Description("Proportion of N returned in dung (0-1):")]
		public double ProportionN2Dung { get; set; }

		// - Outputs from this manager
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM defoliated today
		public double DefoliatedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N defoliate today
		public double DefoliatedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM harvested today
		public double HarvestedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N harvested today
		public double HarvestedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture DM removed from the field
		public double RemovedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Pasture N removed from the field
		public double RemovedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue DM returned to the field
		public double ReturnedWt { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Residue N returned to the field
		public double ReturnedN { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as dung (SurfaceOM)
		public double NReturnedInDung { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Harvested N returned as urine (urea)
		public double NReturnedInUrine { get; set; }
		[XmlIgnore][Units("day")]// Description: Number of days after last defoliation
		public int DaysAfterCut { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut
		public double PreHarvestDM { get; set; }
		[XmlIgnore][Units("g/m2")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut
		public double PostHarvestDM { get; set; }
		
		// - Internal variables
		// fraction of harvested Dm to actually remove from field
		private double fractionDM2Remove = 1.0;
		// flag whether defoliation is allowed
		private bool rotationAllowed = true;
		// number of days for each defoliation event
		private int cuttingDuration = 0;
		// counter for day within each defoliation
		private int daysCutting = 0;
		// type of interval (Fixed or target)
		private string intervalType;
		// total herbage to remove in g/m2 per day
		private double herbageToRemove;
		// type of DM amount (ResidualDM or DMToRemove)
		private string amountType;
		// auxiliary flag for defoliation
		private bool aCutHasHappened = false;

		// - Event to add residue or dung to surface OM
		public event BiomassRemovedDelegate BiomassRemoved;

		[EventSubscribe("Commencing")]
		private void OnSimulationCommencing(object sender, EventArgs e)
		{
			foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))
			{
				Pasture.Add(species);
			}

			// reset variables
			DaysAfterCut = 0;
			resetVariables();
			cuttingDuration = DurationOfCut;
			
			// get the type of amount given
			if (RemoveAmountType == removeAmountTypes.ResidualDM)
				amountType = "SetResidueAmount";
			else
				amountType = "SetRemoveAmount";

			// get the type of amount given
			if (IntervalType == rotationIntervalTypes.FixedInterval)
				intervalType = "Fixed";
			else
				intervalType = "Target";

			// make sure that rotation start when startDate < simulationStartDay
			if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))
				CutRotationStartDate = Clock.Today;
		}
		
		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			if (rotationAllowed)
			{
				if (Clock.Today == CutRotationStartDate)
					DaysAfterCut = CutInterval;

				// Check whether we can defoliate
				if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))
				{
					// Check whether we should start a defoliation
					if (DaysAfterCut >= (CutInterval - 1))
					{
						Graze(AmountGiven, amountType, DurationOfCut);
					}
				}
			}

			// Check whether we need to continue cutting
			if ((daysCutting > 0) && (daysCutting < cuttingDuration))
			{
				// reset outputs
				resetVariables();

				removeDM(herbageToRemove);
				returnExcreta();
				daysCutting += 1;
				if (daysCutting == cuttingDuration)
					PostHarvestDM = Pasture[0].StandingHerbageWt; //+ Pasture[1].StandingHerbageWt
			}

			// reset outputs
			if (daysCutting < 0)
			{
				resetVariables();
				daysCutting = 0;
			}
		}

		[EventSubscribe("DoManagementCalculations")]
		private void OnDoManagementCalculations(object sender, EventArgs e)
		{
			// Check whether a cutting has finished
			if (daysCutting == cuttingDuration)
			{
				aCutHasHappened = true;
				daysCutting = -1;
			}

			// Increase the counter for days after cutting
			if (aCutHasHappened && (daysCutting == 0))
				DaysAfterCut += 1;
		}

		public enum removeAmountTypes
		{
			/// <summary>Setting DM amount to remove</summary>
			DMToRemove,
			/// <summary>Setting residual DM amount</summary>
			ResidualDM
		}

		public enum rotationIntervalTypes
		{
			/// <summary>Setting a fixed interval</summary>
			FixedInterval,
			/// <summary>Setting a target (minimum) inteval</summary>
			TargetInterval
		}

		public enum removeDMTypes
		{
			/// <summary>Remove all DM</summary>
			RemoveAll,
			/// <summary>Remove no DM</summary>
			RemoveNone,
			/// <summary>Remove a fraction based on digestibility</summary>
			BasedOnDigestibility
		}

		// Resets the values of all outputs
		private void resetVariables()
		{
			DefoliatedWt = 0.0;
			DefoliatedN = 0.0;
			HarvestedWt = 0.0;
			HarvestedN = 0.0;
			RemovedWt = 0.0;
			RemovedN = 0.0;
			ReturnedWt = 0.0;
			ReturnedN = 0.0;
			NReturnedInDung = 0.0;
			NReturnedInUrine = 0.0;
		}

		// Description: Perform the basic calculations for defoliation
		public void Graze(double amountDM, string amountType, int duration)
		{
			// Get the existing plant amount
			PreHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
			
			// Check the amount to remove and print some info
			if ((amountType == "SetRemoveAmount") && (PreHarvestDM >= amountDM / duration))
			{
				summary.WriteMessage(this, "   Defoliating " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = amountDM / duration;
			}
			else if ((amountType == "SetResidueAmount") && (PreHarvestDM >= amountDM))
			{
				summary.WriteMessage(this, "   Defoliating down to approximately " + (10 * amountDM).ToString("#0.0") + "kg/ha over " + duration + " days");
				herbageToRemove = (PreHarvestDM - amountDM) / duration;
			}
			else
			{
				summary.WriteMessage(this, "   Defoliation will not happend because there is not enough plant material");
				if (intervalType == "Fixed")
					DaysAfterCut = -duration;
				return;
			}

			cuttingDuration = duration;
			// Preform first defoliation
			removeDM(herbageToRemove);
			returnExcreta();
			daysCutting = 1;
			DaysAfterCut = 0;
			if (daysCutting == cuttingDuration)
				PostHarvestDM = Pasture[0].StandingHerbageWt;  //+ Pasture[1].StandingHerbageWt
		}

		// Do the DM removal
		private void removeDM(double removeAmount)
		{
			double existingWt = Pasture[0].HarvestableWt;  // + Pasture[1].HarvestableWt

			// Check whether we harvest anything
			if (existingWt >= removeAmount)
			{
				foreach (AgPasture.PastureSpecies species in Pasture)
				{
					double amountToRemove = removeAmount * species.HarvestableWt / existingWt;
					species.Graze(amount: amountToRemove, type: "SetRemoveAmount");
				}
				
				// get total harvested
				DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt
				DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN
				HarvestedWt = DefoliatedWt;
				HarvestedN = DefoliatedN;

				// get amounts actually removed from field and that to be returned (dung/urine)
				if (DMRemoveType == removeDMTypes.RemoveAll)
					fractionDM2Remove = 1.0;
				else if (DMRemoveType == removeDMTypes.RemoveNone)
					fractionDM2Remove = 0.0;
				else
				{
					fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt
					fractionDM2Remove /= removeAmount;
				}
				
				RemovedWt = HarvestedWt * fractionDM2Remove;
				RemovedN = HarvestedN * FractionN2Remove;
				ReturnedWt = HarvestedWt - RemovedWt;
				ReturnedN = HarvestedN - RemovedN;
				NReturnedInDung = ReturnedN * ProportionN2Dung;
				NReturnedInUrine = ReturnedN - NReturnedInDung;
			}
		}

		// Return dung and urine
		private void returnExcreta()
		{
			if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))
			{
				PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();
				string[] type = new string[] { "RuminantDung_PastureFed" };
				float[] dltdm = new float[] { (Single)ReturnedWt };
				float[] dltn = new float[] { (Single)NReturnedInDung };
				float[] dltp = new float[] { 0 };
				float[] fraction = new float[] { 1 };     // fraction is always 1.0 here

				BiomassDung.crop_type = "RuminantDung_PastureFed";
				BiomassDung.dm_type = type;
				BiomassDung.dlt_crop_dm = dltdm;
				BiomassDung.dlt_dm_n = dltn;
				BiomassDung.dlt_dm_p = dltp;
				BiomassDung.fraction_to_residue = fraction;
				BiomassRemoved.Invoke(BiomassDung);
			}

			if (NReturnedInUrine > 0.0)
			{
				fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>no</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <PastureSpecies>
        <Name>Ryegrass</Name>
        <MaximumNUptake>10</MaximumNUptake>
        <Albedo>0.26</Albedo>
        <Gsmax>0.011</Gsmax>
        <R50>200</R50>
        <SpeciesFamily>Grass</SpeciesFamily>
        <PhotosyntheticPathway>C3</PhotosyntheticPathway>
        <InitialShootDM>2500</InitialShootDM>
        <InitialRootDM>500</InitialRootDM>
        <InitialRootDepth>600</InitialRootDepth>
        <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
        <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
        <GrowthTminimum>1</GrowthTminimum>
        <GrowthToptimum>20</GrowthToptimum>
        <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
        <UseHeatStressFactor>yes</UseHeatStressFactor>
        <HeatOnsetTemperature>28</HeatOnsetTemperature>
        <HeatFullTemperature>35</HeatFullTemperature>
        <HeatRecoverySumDD>30</HeatRecoverySumDD>
        <HeatRecoveryTReference>25</HeatRecoveryTReference>
        <UseColdStressFactor>yes</UseColdStressFactor>
        <ColdOnsetTemperature>1</ColdOnsetTemperature>
        <ColdFullTemperature>-5</ColdFullTemperature>
        <ColdRecoverySumDD>25</ColdRecoverySumDD>
        <ColdRecoveryTReference>0</ColdRecoveryTReference>
        <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
        <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
        <RespirationTReference>20</RespirationTReference>
        <RespirationExponent>1.5</RespirationExponent>
        <NThresholdsForLeaves>
          <double>0.04</double>
          <double>0.012</double>
          <double>0.05</double>
        </NThresholdsForLeaves>
        <NThresholdsForStems>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForStems>
        <NThresholdsForStolons>
          <double>0</double>
          <double>0</double>
          <double>0</double>
        </NThresholdsForStolons>
        <NThresholdsForRoots>
          <double>0.02</double>
          <double>0.006</double>
          <double>0.025</double>
        </NThresholdsForRoots>
        <DegreesDayForGermination>125</DegreesDayForGermination>
        <TargetShootRootRatio>4</TargetShootRootRatio>
        <MaxRootAllocation>0.25</MaxRootAllocation>
        <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
        <UseReproSeasonFactor>yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
        <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
        <FractionLeafMaximum>0.7</FractionLeafMaximum>
        <FractionLeafMinimum>0.7</FractionLeafMinimum>
        <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
        <FractionLeafDMFactor>2000</FractionLeafDMFactor>
        <FractionLeafExponent>3</FractionLeafExponent>
        <FractionToStolon>0</FractionToStolon>
        <SpecificLeafArea>25</SpecificLeafArea>
        <SpecificRootLength>100</SpecificRootLength>
        <StolonEffectOnLAI>0</StolonEffectOnLAI>
        <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
        <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
        <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
        <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
        <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
        <DetachmentRateShoot>0.08</DetachmentRateShoot>
        <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
        <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
        <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
        <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
        <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
        <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
        <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
        <FractionNLuxuryRemobilisable>
          <double>0.1</double>
          <double>0.1</double>
          <double>0.1</double>
        </FractionNLuxuryRemobilisable>
        <MinimumNFixation>0</MinimumNFixation>
        <MaximumNFixation>0</MaximumNFixation>
        <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
        <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
        <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
        <NDillutionCoefficient>0.25</NDillutionCoefficient>
        <GlfGeneric>1</GlfGeneric>
        <GlfSoilFertility>1</GlfSoilFertility>
        <PlantHeightMinimum>25</PlantHeightMinimum>
        <PlantHeightMaximum>600</PlantHeightMaximum>
        <PlantHeightMassForMax>10000</PlantHeightMassForMax>
        <PlantHeightExponent>2.8</PlantHeightExponent>
        <RootDepthMinimum>50</RootDepthMinimum>
        <RootDepthMaximum>750</RootDepthMaximum>
        <RootElongationRate>25</RootElongationRate>
        <RootDistributionDepthParam>90</RootDistributionDepthParam>
        <RootDistributionExponent>3.2</RootDistributionExponent>
        <DigestibilitiesCellWall>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.6</double>
          <double>0.2</double>
        </DigestibilitiesCellWall>
        <MinimumGreenWt>100</MinimumGreenWt>
        <FractionStolonStanding>0</FractionStolonStanding>
        <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
        <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
        <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
        <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
      </PastureSpecies>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Ryegrass].AboveGroundWt as PlantMass</string>
          <string>[Ryegrass].HarvestedWt as Harvested</string>
          <string>[Ryegrass].WaterDemand as SW_Demand</string>
          <string>[Ryegrass].DemandAtOptimumN as N_Demand</string>
          <string>sum([Ryegrass].WaterUptake) as SW_Uptake</string>
          <string>sum([Ryegrass].SoilNO3Uptake) as N_Uptake</string>
          <string>[Ryegrass].GlfWaterSupply as glfWater</string>
          <string>[Ryegrass].GlfNSupply as glfNitrogen</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Zone>
      <Name>Z02</Name>
      <Folder>
        <Name>Managers</Name>
        <Manager>
          <Name>AutomaticFertiliser</Name>
          <Script>
            <AllowFertiliser>no</AllowFertiliser>
            <Depth2SoilN>500</Depth2SoilN>
            <CriticalSoilN>50</CriticalSoilN>
            <FertNAmount>25</FertNAmount>
            <FertType>UreaN</FertType>
            <FertApplicationDepth>1</FertApplicationDepth>
            <FertMinimumDays>1</FertMinimumDays>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using APSIM.Shared.Utilities;
using System.Xml.Serialization;

namespace Models
{
	[Serializable]
	public class Script : Model
	{
		[Link] Clock Clock;
		[Link] Fertiliser fertiliser;
		[Link] ISummary summary = null;
		[Link] Soil Soil;

		//User inputs from properties tab
		[Description("Turn ferliser applications on? ")]
		public yesnoType AllowFertiliser { get; set; }
		
		[Description("Depth to calculate available soil N (mm): ")]
		public double Depth2SoilN { get; set; }

		[Description("Minimum available N, triggers an application (kgN/ha): ")]
		public double CriticalSoilN { get; set; }

		[Description("Amount of N fertiliser for each application (kgN/ha): ")]
		public double FertNAmount { get; set; }

		[Description("Type of N fertiliser to apply: ")]
		public Fertiliser.Types FertType { get; set; }

		[Description("Depth at which to apply the fertiliser (mm): ")]
		public double FertApplicationDepth { get; set; }
	   
		[Description("Minimum period between applications (days): ")]
		public double FertMinimumDays { get; set; }
	   
		public enum yesnoType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		[XmlIgnore] public double TopMineralN { get; set; }
		
		private DateTime lastApplicationDate;
		private bool fertiliserIsAllowed;
		private int nLayers;

		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{
			fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);
			nLayers = Soil.SoilWater.Thickness.Length;
		}

		[EventSubscribe("DoManagement")]
		private void OnDoManagement(object sender, EventArgs e)
		{
			double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;
			
			// get the N stored in the soil
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopMineralN = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopMineralN += (Soil.SoilNitrogen.NO3[layer]
				+ Soil.SoilNitrogen.NH4[layer]
				+ Soil.SoilNitrogen.urea[layer])
				* fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= Depth2SoilN)
					layer = nLayers;
			}

			if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))
			{
				fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);
				lastApplicationDate = Clock.Today;
			}
		}
	}
}
]]></Code>
        </Manager>
        <Manager>
          <Name>AutomaticIrrigation</Name>
          <Script>
            <allowIrrigation>no</allowIrrigation>
            <allowIrrigationAll>yes</allowIrrigationAll>
            <seasonStart>15-Aug</seasonStart>
            <seasonEnd>30-May</seasonEnd>
            <seasonsAllocation>10000</seasonsAllocation>
            <triggerDeficit>99</triggerDeficit>
            <targetDeficit>100</targetDeficit>
            <returndays>1</returndays>
            <maximumAmount>5</maximumAmount>
            <depthPAWC>600</depthPAWC>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;

        
namespace Models
{
	[Serializable] 
	[System.Xml.Serialization.XmlInclude(typeof(Model))]
	public class Script : Model
	{
		//Communication to other modules
		[Link] ISummary summary = null;
		[Link] Irrigation Irrigation;
		[Link] Clock Clock;
		[Link] Soil Soil;
		[Link(IsOptional = true)] ICrop existingCrop;
	   
		//User inputs from properties tab
		[Description("Turn irrigation on?")] public answerType allowIrrigation { get; set; }
		[Description("Irrigate regardless of crop state?")] public answerType allowIrrigationAll { get; set; }
		[Description("Start of irrigation season (dd-MMM)")]
		public string seasonStart { get; set; }
		[Description("End of irrigation season (dd-MMM)")]
		public string seasonEnd { get; set; }
		[Description("Season allocation (mm)")]
		public double seasonsAllocation { get; set; }
		[Description("Deficit to trigger irrigation (% PAWC)")]
		public double triggerDeficit { get; set; }
		[Description("Deficit to stop irrigaton (% PAWC)")]
		public double targetDeficit { get; set; }
		[Description("Minimum days for irrigation to return")]
		public double returndays { get; set; }
		[Description("Maximum irrigation application (mm/day)")]
		public double maximumAmount { get; set; }
		[Description("Depth to calculate PAWC (mm)")]
		public double depthPAWC { get; set; }
	   
		public enum answerType
		{
			/// <summary>a positive answer</summary>
			yes,
			/// <summary>a negative answer</summary>
			no
		}

		//Class members
		[XmlIgnore] public double TopSWdeficit { get; set; }
		[XmlIgnore] public double TopSWC { get; set; }
		[XmlIgnore] public double DaysSinceIrrigation { get; set; }
		[XmlIgnore] public double AmountToApply { get; set; }
		[XmlIgnore] public double SeasonAppliedAmount { get; set; }
		
		private bool IrrigationIsAllowed { get; set; }
		private bool IrrigationIsAlwaysAllowed { get; set; }
		
		private bool SeasonIsOpen { get; set; }
		private bool CropIsActive { get; set; }
		private bool IrrigatorIsAvailable { get; set; }
		private bool SoilIsDry { get; set; }

		private DateTime StartDate;
		private DateTime EndDate;
		private double TopDUL;
		private double TopLL;
		private int nLayers;
	
		//Calculate static soil variables
		[EventSubscribe("StartOfSimulation")]
		private void OnStartOfSimulation(object sender, EventArgs e)
		{   
			//Set the season dates
			StartDate = DateTime.Parse(seasonStart + "-" + Clock.Today.Year.ToString());
			EndDate = DateTime.Parse(seasonEnd + "-" + Clock.Today.Year.ToString());
			
			//Can we irrigate at all?
			IrrigationIsAllowed = false; 
			if (allowIrrigation == answerType.yes)
				IrrigationIsAllowed = true; 
			if (allowIrrigationAll == answerType.yes)
				IrrigationIsAlwaysAllowed = true; 





			//Calculate soil water variables
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			nLayers = Soil.SoilWater.Thickness.Length;
			for (int layer = 0; layer < nLayers; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopLL += Soil.SoilWater.LL15mm[layer] * fracLayer;
				TopDUL += Soil.SoilWater.DULmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
		}
	   	  
		//Determine daily requirement for irrigation
		[EventSubscribe("StartOfDay")]
		private void OnStartOfDay(object sender, EventArgs e)
		{
			//Can we irrigate today?		  
			SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);

			//Is there a crop in the ground that needs irrigation?
			CropIsActive = false;
			if (IrrigationIsAlwaysAllowed)
				CropIsActive = true;  // might not be but we don't care
			else if ((existingCrop != null) && (existingCrop.IsAlive))
				CropIsActive = true;
			//if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))
	      
			//Is the irrigator available?
			IrrigatorIsAvailable = false;
			DaysSinceIrrigation += 1;
			if (DaysSinceIrrigation >= returndays)
				IrrigatorIsAvailable = true;
	      
			//Is the soil dry enough to require irrigation?
			SoilIsDry = false;
			double depthFromSurface = 0.0;
			double fracLayer = 0.0;
			TopSWC = 0.0;
			for (int layer = 0; layer < nLayers; layer++)
			//for (int layer = 0; depthFromSurface < depthPAWC + Soil.SoilWater.Thickness[layer]; layer++)
			{
				fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.SoilWater.Thickness[layer]);
				TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;
				depthFromSurface += Soil.SoilWater.Thickness[layer];
				if (depthFromSurface >= depthPAWC)
					layer = nLayers;
			}
			
			TopSWdeficit = TopSWC - TopDUL;
			if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)
				SoilIsDry = true;
	            
			//Are all the conditions ratifying irrigation
			if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)
			{
				//Lets bloody well irrigate then!!!!
				AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;
				AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));
				Irrigation.Apply(AmountToApply);
				DaysSinceIrrigation = 0;
				SeasonAppliedAmount += AmountToApply;
			}
		}
		
		///Checks whether theDate is between iniDate and endDate (non-year specific)
		private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
		{
			bool result = false;
			if (iniDate.DayOfYear < endDate.DayOfYear)
			{
				// period is within one year, ex: summer in the northern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			else
			{
				// period goes over the end of the year, ex: summer in the southern hemisphere
				if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
					result = true;
			}
			
			return result;
		}
	}
}
]]></Code>
        </Manager>
      </Folder>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.96</emissivity>
        <RadIntTotal>0</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
      </Fertiliser>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>Sward</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>0</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>Sward</PoolName>
        <type>grass</type>
        <mass>0</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <Soil>
        <Name>Soil</Name>
        <Analysis>
          <Name>Analysis</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </CEC>
          <ParticleSizeSand>
            <double>10</double>
            <double>10</double>
            <double>10</double>
            <double>10</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>30</double>
            <double>30</double>
            <double>30</double>
            <double>30</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>60</double>
            <double>60</double>
            <double>60</double>
            <double>60</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <LL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </LL>
            <KL>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
            <double>1.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </AirDry>
          <LL15>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </LL15>
          <DUL>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </SAT>
          <KS>
            <double>500</double>
            <double>500</double>
            <double>500</double>
            <double>500</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>6</WinterU>
          <WinterCona>3.5</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
          <wfpsN2N2O_x>
            <double>22</double>
            <double>88</double>
          </wfpsN2N2O_x>
          <wfpsN2N2O_y>
            <double>0.1</double>
            <double>1</double>
          </wfpsN2N2O_y>
          <oc>
            <double>3.7136764881329496</double>
            <double>2.4698281813043792</double>
            <double>1.2383961716086014</double>
            <double>0.49836009167083023</double>
          </oc>
        </SoilNitrogen>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <RootCN>40</RootCN>
          <RootWt>0</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-45</string>
            <string>45-60</string>
          </Depth>
          <OC>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </OC>
          <FBiom>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater>
          <Name>Initial water</Name>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Sample>
          <Name>Initial nitrogen</Name>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>150</double>
            <double>150</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>5</double>
            <double>5</double>
            <double>5</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
        </CERESSoilTemperature>
        <RecordNumber>0</RecordNumber>
        <SoilType />
        <LocalName>Stores lots of water</LocalName>
        <Site>Made up</Site>
        <NearestTown />
        <Region />
        <Country />
        <NaturalVegetation />
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <SoluteManager>
        <Name>SoluteManager</Name>
      </SoluteManager>
      <Report>
        <Name>Results</Name>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>sum([Soil].SoilWater.SWmm) as SoilWater</string>
          <string>sum([Soil].SoilNitrogen.NH4)+sum([Soil].SoilNitrogen.NO3) as SoilNitrogen</string>
          <string>[Irrigation].IrrigationApplied as Irrigation</string>
          <string>[Fertiliser].NitrogenApplied as Fertiliser</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Folder>
      <Name>SimPlots</Name>
      <Graph>
        <Name>SoilWater0</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter>[Zone] = 'Z0'</Filter>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater01</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter>[Zone] = 'Z01'</Filter>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater02</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter>[Zone] = 'Z02'</Filter>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilWater</Name>
        <Series>
          <Name>Water</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>50</Minimum>
          <Maximum>275</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>PlantWt</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>PlantMass</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>2600</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>Harvested</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Harvested</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterDemand</Name>
        <Series>
          <Name>Demand</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SW_Demand</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>5</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterUptake</Name>
        <Series>
          <Name>Uptake</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-1663232</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SW_Uptake</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>5</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>WaterStress</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>glfWater</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>1.05</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NDemand</Name>
        <Series>
          <Name>Demand</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>N_Demand</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NUptake</Name>
        <Series>
          <Name>Uptake</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-1663232</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>N_Uptake</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>NStress</Name>
        <Series>
          <Name>Ryegrass</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>glfNitrogen</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>1.05</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>SoilNitrogen</Name>
        <Series>
          <Name>Nitrogen</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>SoilNitrogen</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>false</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>IrrigationApplied</Name>
        <Series>
          <Name>Irrigation</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Irrigation</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
      <Graph>
        <Name>FertiliserApplied</Name>
        <Series>
          <Name>Fertiliser</Name>
          <Type>Scatter</Type>
          <XAxis>Bottom</XAxis>
          <YAxis>Left</YAxis>
          <ColourArgb>-16736653</ColourArgb>
          <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
          <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
          <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
          <Marker>None</Marker>
          <MarkerSize>Normal</MarkerSize>
          <Line>Solid</Line>
          <LineThickness>Normal</LineThickness>
          <TableName>Results</TableName>
          <XFieldName>Date</XFieldName>
          <YFieldName>Fertiliser</YFieldName>
          <ShowInLegend>true</ShowInLegend>
          <IncludeSeriesNameInLegend>false</IncludeSeriesNameInLegend>
          <Cumulative>true</Cumulative>
          <CumulativeX>false</CumulativeX>
          <Filter />
        </Series>
        <Axis>
          <Type>Left</Type>
          <Title />
          <Inverted>false</Inverted>
          <Minimum>0</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <Axis>
          <Type>Bottom</Type>
          <Inverted>false</Inverted>
          <Minimum>NaN</Minimum>
          <Maximum>NaN</Maximum>
          <Interval>NaN</Interval>
        </Axis>
        <LegendPosition>TopRight</LegendPosition>
        <DisabledSeries />
        <IncludeInDocumentation>false</IncludeInDocumentation>
      </Graph>
    </Folder>
  </Simulation>
  <ExplorerWidth>286</ExplorerWidth>
</Simulations>